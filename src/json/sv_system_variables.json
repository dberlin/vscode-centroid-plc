[
  {
    "name": "SV_M94_M95_1",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_2",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_3",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_4",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_5",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_6",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_7",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_8",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_9",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_10",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_11",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_12",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_13",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_14",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_15",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_16",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_17",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_18",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_19",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_20",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_21",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_22",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_23",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_24",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_25",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_26",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_27",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_28",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_29",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_30",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_31",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_32",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_33",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_34",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_35",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_36",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_37",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_38",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_39",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_40",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_41",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_42",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_43",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_44",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_45",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_46",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_47",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_48",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_49",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_50",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_51",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_52",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_53",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_54",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_55",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_56",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_57",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_58",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_59",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_60",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_61",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_62",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_63",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_64",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_65",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_66",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_67",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_68",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_69",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_70",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_71",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_72",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_73",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_74",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_75",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_76",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_77",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_78",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_79",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_80",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_81",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_82",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_83",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_84",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_85",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_86",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_87",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_88",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_89",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_90",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_91",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_92",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_93",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_94",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_95",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_96",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_97",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_98",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_99",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_100",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_101",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_102",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_103",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_104",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_105",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_106",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_107",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_108",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_109",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_110",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_111",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_112",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_113",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_114",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_115",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_116",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_117",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_118",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_119",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_120",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_121",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_122",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_123",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_124",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_125",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_126",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_127",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_M94_M95_128",
    "kind": "MEM",
    "documentation": "Used for M-Codes that require PLC interaction like M3, M4, M6, M7, M8, M10, M11 and custom M-Codes. They are set and reset from M & G-code programs using M94 and M95. These bits can also be controlled by the PLC program even though they are in the section labeled as Read Only for the PLC. Be aware that CNC11 has built-in default actions for some M-codes that control the first 16 of these variables.\n\nAn example is to turn off auto coolant and spindle when not running a program.\n\nIF !SV_PROGRAM_RUNNING THEN RST M3, RST M4, RST M7, RST M8."
  },
  {
    "name": "SV_PROGRAM_RUNNING",
    "kind": "MEM",
    "documentation": "1 = MDI mode or a job is in progress"
  },
  {
    "name": "SV_MDI_MODE",
    "kind": "MEM",
    "documentation": "1 = MDI mode active"
  },
  {
    "name": "SV_PC_OVERRIDE_CONTROL_FEEDRATE_OVERRIDE",
    "kind": "MEM",
    "documentation": "1 = FeedRate Override Knob is allowed to change the feedrate on axis motion"
  },
  {
    "name": "SV_PC_OVERRIDE_CONTROL_SPINDLE_OVERRIDE",
    "kind": "MEM",
    "documentation": "1 = Spindle Override keys or Knob change the spindle speed commanded"
  },
  {
    "name": "SV_PC_OVERRIDE_CONTROL_FEEDHOLD",
    "kind": "MEM",
    "documentation": "1 = Feedhold pauses the G-Code program"
  },
  {
    "name": "SV_PC_POWER_AXIS_1",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_2",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_3",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_4",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_5",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_6",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_7",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_PC_POWER_AXIS_8",
    "kind": "MEM",
    "documentation": "1 = indicates if the axis is powered to hold position"
  },
  {
    "name": "SV_DRIVE_ONLINE_1-8",
    "kind": "MEM",
    "documentation": "1 = The drive for the axis is detected."
  },
  {
    "name": "SV_LEGACY_JOG_PANEL_ONLINE",
    "kind": "MEM",
    "documentation": "1 = Legacy Jog Panel detected. Ex: Uniconsole-2"
  },
  {
    "name": "SV_PLC_BUS_ONLINE",
    "kind": "MEM",
    "documentation": "1 = Valid MPU11 PLC detected. Checked as part of Fiber Checking PLC Program section."
  },
  {
    "name": "SV_JOG_LINK_ONLINE",
    "kind": "MEM",
    "documentation": "1 = Valid Jog Panel detected as Jogboard."
  },
  {
    "name": "SV_PLC_IO2_ONLINE",
    "kind": "MEM",
    "documentation": "1 = IO2 Legacy PLC detected."
  },
  {
    "name": "SV_AXIS_VALID_1",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_2",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_3",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_4",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_5",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_6",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_7",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_AXIS_VALID_8",
    "kind": "MEM",
    "documentation": "1 = Motor Parameters screen axis label allows motion.\n\nAllowed labels are X, Y, Z, A, B, C, U, V, W."
  },
  {
    "name": "SV_PC_RIGID_TAP_SPINDLE_OFF",
    "kind": "MEM",
    "documentation": "CNC software SETs this bit to signal that the spindle should be turned off when the rigid tap depth has been reached if Parameter 36, bit 4 is SET, otherwise it is not needed.\n\n\n\n\nThis is usually not needed. It is NOT needed just because you have a custom mfunc5.mac file. CNC software ignores custom M5s during a rigid tap. It decides which bit to turn turn off (M3 or M4) based on the spindle direction. The only time that this system variable is needed is as follows: If turning off the spindle requires doing more than clearing M3 or M4. Note that CNC software will only clear one of M3 or M4 during a rigid tap, not both."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_1",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_2",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_3",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_4",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_5",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_6",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_7",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_8",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_9",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_10",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_11",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_12",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_13",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_14",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_15",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_16",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_17",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_18",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_19",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_20",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_21",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_22",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_23",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_24",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_25",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_26",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_27",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_28",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_29",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_30",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_31",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_32",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_33",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_34",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_35",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_36",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_37",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_38",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_39",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_40",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_41",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_42",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_43",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_44",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_45",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_46",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_47",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_48",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_49",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_50",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_51",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_52",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_53",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_54",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_55",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_56",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_57",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_58",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_59",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_60",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_61",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_62",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_63",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_64",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_65",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_66",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_67",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_68",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_69",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_70",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_71",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_72",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_73",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_74",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_75",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_76",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_77",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_78",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_79",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_80",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_81",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_82",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_83",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_84",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_85",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_86",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_87",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_88",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_89",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_90",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_91",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_92",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_93",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_94",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_95",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_96",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_97",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_98",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_99",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_100",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_101",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_102",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_103",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_KEYBOARD_KEY_104",
    "kind": "MEM",
    "documentation": "1 = Keyboard key pressed, 0 = Keyboard key not pressed.\n\nSee Appendix C."
  },
  {
    "name": "SV_PC_VIRTUAL_JOGPANEL_ACTIVE",
    "kind": "MEM",
    "documentation": "Indicates whether keyboard jogging is enabled i.e. the user has activated the keyboard (virtual) jog panel using ALT-J. Most things besides jogging are allowed without the screen being up by default."
  },
  {
    "name": "SV_PC_HOME_SET",
    "kind": "MEM",
    "documentation": "1 = home set for all valid axes, check this to force slow jog before homing unless Parameter 148 bit 0 is set."
  },
  {
    "name": "SV_PC_SOFTWARE_READY",
    "kind": "MEM",
    "documentation": "1 = CNC software is initialized and communicating with MPU normally\n\n0 = CNC software exited normally or communication fault occurred. Intended to be used in a PLC program to disable certain functions when the CNC software is not running or there is another fault preventing normal communications. For example, on ATC machines, the carousel should not be rotated if the software is not running since the CNC software monitors the reported carousel position and saves changes to the job file."
  },
  {
    "name": "SV_PC_TOGGLE_RAPID_OVERRIDE",
    "kind": "MEM",
    "documentation": "CNC software SETs this bit when the state of Rapid Override needs to change. The PLC should RSTs this bit after toggling Rapid Override."
  },
  {
    "name": "SV_DOING_AUTO_TOOL_MEASURE",
    "kind": "MEM",
    "documentation": "This bit is set by the CNC software when performing an automatic tool measure with the TT1."
  },
  {
    "name": "SV_JOG_PANEL_REQUIRED",
    "kind": "MEM",
    "documentation": "Indicates the setting of “Jog Panel Required” in the Control Configuration Menu of CNC software."
  },
  {
    "name": "SV_LIMIT_TRIPPED",
    "kind": "MEM",
    "documentation": "1 = Any configured limit switch is tripped\n\n0 = No configured limit switches are tripped\n\nNote: The PLC program is not required to perform any actions when this bit is set."
  },
  {
    "name": "SV_JOB_IN_PROGRESS",
    "kind": "MEM",
    "documentation": "Set when CNC software is running a job or running an MDI command, but not while at the MDI prompt waiting for input."
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_1",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_2",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_3",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_4",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_5",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_6",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_7",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ZERO_SPEED_8",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is at zero speed in RPM mode"
  },
  {
    "name": "SV_RPM_MODE_ACTIVE_1-8",
    "kind": "MEM",
    "documentation": "1 = AC1 drive axis is in RPM mode"
  },
  {
    "name": "SV_?_AXIS_VALID",
    "kind": "MEM",
    "documentation": "These nine system variables are mapped to the SV_AXIS_VALID_x bits according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_?_AXIS_DRIVE_ONLINE",
    "kind": "MEM",
    "documentation": "These nine system variables are mapped to the SV_DRIVE_ONLINE_x bits according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_?_AXIS_FIBER_OK",
    "kind": "MEM",
    "documentation": "These nine system variables are mapped to the bits in SV_PC_CYCLONE_STATUS_2 according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_?_AXIS_POWERED",
    "kind": "MEM",
    "documentation": "These nine system variables are mapped to the SV_PC_POWER_AXIS_x bits according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_SKIN_EVENT_1",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_2",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_3",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_4",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_5",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_6",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_7",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_8",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_9",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_10",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_11",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_12",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_13",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_14",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_15",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_16",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_17",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_18",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_19",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_20",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_21",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_22",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_23",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_24",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_25",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_26",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_27",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_28",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_29",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_30",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_31",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_32",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_33",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_34",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_35",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_36",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_37",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_38",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_39",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_40",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_41",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_42",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_43",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_44",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_45",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_46",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_47",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_48",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_49",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_50",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_51",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_52",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_53",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_54",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_55",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_56",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_57",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_58",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_59",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_60",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_61",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_62",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_63",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_64",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_65",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_66",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_67",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_68",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_69",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_70",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_71",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_72",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_73",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_74",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_75",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_76",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_77",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_78",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_79",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_80",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_81",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_82",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_83",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_84",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_85",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_86",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_87",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_88",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_89",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_90",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_91",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_92",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_93",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_94",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_95",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_96",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_97",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_98",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_99",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_100",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_101",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_102",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_103",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_104",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_105",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_106",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_107",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_108",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_109",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_110",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_111",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_112",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_113",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_114",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_115",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_116",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_117",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_118",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_119",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_120",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_121",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_122",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_123",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_124",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_125",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_126",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_127",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_SKIN_EVENT_128",
    "kind": "MEM",
    "documentation": "These 128 system variable bits are used to provide generic events that can be SET/RST by skinning applications via the CNC Skinning API. The Centroid Virtual Control Panel (VCP) is a skinning application that uses them to communicate the status of virtual jog panel button states, among other things. As a convention, SV_SKIN_EVENT_1-50 should be mapped to the same fifty keys found on a real hardware jog panel, i.e., SV_SKIN_EVENT_1 corresponding to Spindle+ key, and then continuing left to right, top to bottom with SV_SKIN_EVENT_50 corresponding to the CYCLE_START key."
  },
  {
    "name": "SV_PC_DAC_SPINDLE_SPEED",
    "kind": "W",
    "documentation": "The DAC spindle speed as requested by the CNC software (value range is 0-65535)"
  },
  {
    "name": "SV_M_FUNCTION",
    "kind": "W",
    "documentation": "Set as part of M-code execution."
  },
  {
    "name": "SV_TOOL_NUMBER",
    "kind": "W",
    "documentation": "Set as part of a tool change (M107), to indicate the requested tool number. In the case of “enhanced ATC” operation this is actually a request for a carousel bin location. (The LDT command of XPLCCOMP is deprecated and not used.)"
  },
  {
    "name": "SV_ATC_CAROUSEL_POSITION",
    "kind": "W",
    "documentation": "Sent by CNC software when it first starts up or as part of an “enhanced ATC” reset feature. (The LCP command of XPLCCOMP is deprecated and not used.)"
  },
  {
    "name": "SV_ATC_TOOL_IN_SPINDLE",
    "kind": "W",
    "documentation": "Sent by CNC software when it first starts up and the .job file is parsed or as part of an “enhanced ATC” reset feature. (The LTS command of XPLCCOMP is deprecated and not used.)"
  },
  {
    "name": "SV_PC_FEEDRATE_PERCENTAGE",
    "kind": "W",
    "documentation": "0-200% adjustment for axis motion control. The value is sent by CNC software for machine parameter 78 bit 1 checking and on-screen-display. This value is not needed if SV_PC_OVERRIDE_CONTROL_FEEDRATE_OVERRIDE is not SET."
  },
  {
    "name": "SV_PC_SPINDLE_OVERRIDE",
    "kind": "W",
    "documentation": "Not currently used."
  },
  {
    "name": "SV_PC_CYCLONE_STATUS_1",
    "kind": "W",
    "documentation": "PLC and Drive Status Bits"
  },
  {
    "name": "SV_PC_CYCLONE_STATUS_2",
    "kind": "W",
    "documentation": "The PLC program should check drive enables from this word to determine if fiber4 has been broken and cause a drive fault"
  },
  {
    "name": "SV_PC_MINI_PLC_ONLINE",
    "kind": "W",
    "documentation": "Online bits for PLCADD1616 and other expansion PLC modules."
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_0",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_1",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_2",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_3",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_4",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_5",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_6",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_MPU11_LASH_OFFSET_7",
    "kind": "W",
    "documentation": "The current lash offset"
  },
  {
    "name": "SV_FSIO_1-32",
    "kind": "W",
    "documentation": "Fast Synchronous IO (see M300 commands in the Operator Manual)"
  },
  {
    "name": "SV_STALL_REASON",
    "kind": "W",
    "documentation": "Set whenever SV_STALL_ERROR is set.\n\nNo Error = 0 position error = 1\n\nfull power without motion = 2 encoder differential error = 3 spindle slave position error = 4 OpticDirect C8 Error = 6\n\nscale encoder differential error=15 encoder quadrature error = 16\n\nscale encoder quadrature error = 17 standoff_error = 18\n\nscale position error = 19 master enable turned off = 99"
  },
  {
    "name": "SV_STALL_AXIS",
    "kind": "W",
    "documentation": "Set whenever SV_STALL_ERROR is set\n\nIt will be set to the appropriate axis of the stall error. If the axis is not applicable then it will be set to 255."
  },
  {
    "name": "SV_HSC_DRIVE_x_STATUS_y",
    "kind": "W",
    "documentation": "These variables contain every bit of the status packets sent back by AC1 drives. There are a total of 64 variables, eight for each of the eight possible AC1 drives. Only SV_HSC_DRIVE_x_STATUS_4 is documented here as it contains PLC related information of greatest importance.\n\nSV_HSC_DRIVE_x_STATUS_4 bits:\n\n\n\n\nbit00 FatalError\n\nIndicates a serious error. The PLC program should monitor this bit on all AC1 drives and treat it as an emergency stop. This bit is cleared by the AC1 drive on the rising edge of SV_MASTER_ENABLE, but if the condition persists, the PLC program will not see a change. Therefore, if the FatalError bit is still on about a second after SV_MASTER_ENABLE has been turned back on (after a release of E-stop), then the fault should be thrown again. Other bits in this variable can be examined to determine the specific reason for the FatalError, but a PLC program does not need to handle every single error with a custom message as the state of all these bits can be viewed in the Log Options menu of CNC11, using the <F5> HSC function"
  },
  {
    "name": "SV_SD_DRIVE_x_STATUS",
    "kind": "W",
    "documentation": "There are five of these variables that correspond to the status of legacy SD drives.\n\nIndicates a serious error. The PLC program should monitor this bit for all drives and treat it as an emergency stop condition. Other bits in this variable can be examined to determine the specific cause, but it is recommended that the PLC just echo this variable to W1-W44 so it can be viewed using line PLC diagnostics in CNC11."
  },
  {
    "name": "SV_DRIVE_TYPE_1",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_2",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_3",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_4",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_5",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_6",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_7",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_TYPE_8",
    "kind": "W",
    "documentation": "The tyoe of drive connected to the axis: 0 = None\n\n1 = Legacy DC 2 = DC3IOB\n\n3 = SD\n\n4 = AC1\n\n5 = OPTIC4\n\n6 = GPIO4D\n\n7 = DC1\n\n8 = ALLINONEDC\n\n9 = Optic Direct 10 = RTK4\n\n11 = ENCEXP\n\n12 = OAK\n\n13 = ACORN\n\n14 = DRIVECOMM"
  },
  {
    "name": "SV_DRIVE_VERSION_1-8",
    "kind": "W",
    "documentation": "The drive firmware version"
  },
  {
    "name": "SV_DRIVE_STATUS_1",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_2",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_3",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_4",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_5",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_6",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_7",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_DRIVE_STATUS_8",
    "kind": "W",
    "documentation": ""
  },
  {
    "name": "SV_?_AXIS_DRIVE_STATUS",
    "kind": "W",
    "documentation": "These nine system variables are mapped to the SV_DRIVE_STATUS_1-8 system variables according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_?_AXIS_DRIVE_STATUS",
    "kind": "W",
    "documentation": "These nine system variables are mapped to the SV_DRIVE_TYPE_1-8 system variables according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_AXIS_LABEL_1",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_2",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_3",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_4",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_5",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_6",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_7",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_AXIS_LABEL_8",
    "kind": "W",
    "documentation": "The uppercase ASCII character value assigned to the axis. Common values are:\n\nA = 65\n\nB = 66\n\nC = 67\n\nN = 78\n\nU = 85\n\nV = 86\n\nW = 87\n\nX = 88\n\nY = 89\n\nZ = 90"
  },
  {
    "name": "SV_SKINNING_DATA_W_1",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_2",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_3",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_4",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_5",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_6",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_7",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_8",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_9",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_10",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_11",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_W_12",
    "kind": "W",
    "documentation": "Generic 32-bit integer data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_?_AXIS_DRIVE_NUMBER",
    "kind": "W",
    "documentation": "These nine system variables are mapped to machine parameter 300 (Axis 1 (?) Drive Number) through machine parameter 307 (Axis 8 (?) Drive Number). They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_PC_CURRENT_WCS",
    "kind": "W",
    "documentation": "The current work coordinate system (1-18) in effect by the CNC software."
  },
  {
    "name": "SV_USB_MPG_AXIS_SELECT",
    "kind": "W",
    "documentation": "Value indicating the wireless USB MPG axis select switch 0 = Off\n\n1-6 selected axis (X, Y, Z, 4th, 5th, 6th )"
  },
  {
    "name": "SV_USB_MPG_SCALE_SELECT",
    "kind": "W",
    "documentation": "Value indicating the wireless USB MPG scale selector knob 1 = x1\n\n10 = x100\n\n100 = x100\n\n1000 = SPIN\n\n10000 = FEED"
  },
  {
    "name": "SV_USB_MPG_BUTTON_STATE",
    "kind": "W",
    "documentation": "Contains bits for wireless MPG USB button states bit 0 = Reset (Cycle Cancel)\n\nbit 1 = Feed Hold bit 2 = Cycle Start bit 3 = Jog Plus bit 4 = Jog Minus\n\nbit 5 = SPIN Auto/Man bit 6 = SPIN On/Off bit 7 = Macro 1\n\nbit 8 = Macro 2\n\nbit 9 = Macro 3\n\nbit 10 = Macro 4 bit 11 = Tool Check\n\nbit 12 = Set Zero (=0)"
  },
  {
    "name": "SV_USB_MPG_ENCODER_WHEEL",
    "kind": "W",
    "documentation": "The MPG wheel position. This system variable counts up and down and does not roll over."
  },
  {
    "name": "SV_MPU11_ABS_POS_0",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_1",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_2",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_3",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_4",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_5",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_6",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_ABS_POS_7",
    "kind": "DW",
    "documentation": "The Absolute Position of the axis in encoder counts. This is the same value that is reported to CNC software and is viewed in PID screen as AbsPos."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_0",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_1",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_2",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_3",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_4",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_5",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_6",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_MPU11_EXPECTED_POS_7",
    "kind": "DW",
    "documentation": "The Expected Position of the axis in encoder counts. This is the current commanded position."
  },
  {
    "name": "SV_STARTUP_TIME",
    "kind": "DW",
    "documentation": "A 12 decimal digit integer representing the date and time the CNC software was started, The format is YYMMDDHHmmSS,."
  },
  {
    "name": "SV_PC_COMMANDED_SPINDLE_SPEED",
    "kind": "FW",
    "documentation": "The commanded “S” value with Spindle Override factored in. Note that Parameters 65-67 for spindle range must be controlled in the PLC program."
  },
  {
    "name": "SV_PC_CONFIG_MIN_SPINDLE_SPEED",
    "kind": "FW",
    "documentation": "The minimum spindle speed from the control configuration."
  },
  {
    "name": "SV_PC_CONFIG_MAX_SPINDLE_SPEED",
    "kind": "FW",
    "documentation": "The maximum spindle speed from the control configuration."
  },
  {
    "name": "SV_MEASURED_SPINDLE_SPEED",
    "kind": "FW",
    "documentation": "The measured spindle speed in RPM, taking into account the SV_SPINDLE_MID_RANGE and SV_SPINDLE_LOW_RANGE system variable settings."
  },
  {
    "name": "SV_SKINNING_DATA_FW_1",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_2",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_3",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_4",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_5",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_6",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_7",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_8",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_9",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_10",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_FW_11",
    "kind": "FW",
    "documentation": "Generic 32-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_PC_MAXIMUM_CSS_SPEED",
    "kind": "FW",
    "documentation": "For Lathe, the maximum constant surface speed set by a G50 command."
  },
  {
    "name": "SV_SKINNING_DATA_DFW_1",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_2",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_3",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_4",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_5",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_6",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_7",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_8",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_9",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_10",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SKINNING_DATA_DFW_11",
    "kind": "DFW",
    "documentation": "Generic 64-bit floating point data that can be set by CNC Skinning API functions and read by the PLC,"
  },
  {
    "name": "SV_SPINDLE_MID_RANGE",
    "kind": "MEM",
    "documentation": "This must be set for Rigid Tapping and display of spindle speed to function correctly. In combination with SV_SPINDLE_LOW_RANGE below, up to four ranges are supported."
  },
  {
    "name": "SV_SPINDLE_LOW_RANGE",
    "kind": "MEM",
    "documentation": "This must be set for Rigid Tapping and display of spindle speed to function correctly. In combination with SV_SPINDLE_MID_RANGE above, up to four ranges are supported."
  },
  {
    "name": "SV_PLC_FAULT",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_LUBRICANT_LOW",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_DRIVE_FAULT",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_SPINDLE_FAULT",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_STOP",
    "kind": "MEM",
    "documentation": "Bit that is SET bu the PLC program on a critical error or when E-Stop is pushed to singal to the CNC software and MPU to prevent axis motion, spindle commands and ATC changes. The bit should be RST when E-Stop is released and there are no other errors."
  },
  {
    "name": "SV_PLC_OP_IN_PROGRESS",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_0",
    "kind": "MEM",
    "documentation": "Invalid (Do not use)"
  },
  {
    "name": "SV_PLC_FUNCTION_1",
    "kind": "MEM",
    "documentation": "Cycle Cancel"
  },
  {
    "name": "SV_PLC_FUNCTION_2",
    "kind": "MEM",
    "documentation": "Cycle Start"
  },
  {
    "name": "SV_PLC_FUNCTION_3",
    "kind": "MEM",
    "documentation": "Tool Check"
  },
  {
    "name": "SV_PLC_FUNCTION_4",
    "kind": "MEM",
    "documentation": "Select Single Block"
  },
  {
    "name": "SV_PLC_FUNCTION_5",
    "kind": "MEM",
    "documentation": "Select X1 Jog Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_6",
    "kind": "MEM",
    "documentation": "Select X10 Jog Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_7",
    "kind": "MEM",
    "documentation": "Select X100 Jog Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_8",
    "kind": "MEM",
    "documentation": "Not Used (formally User Jog Inc Mode)"
  },
  {
    "name": "SV_PLC_FUNCTION_9",
    "kind": "MEM",
    "documentation": "Select Inc/Cont Jog Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_10",
    "kind": "MEM",
    "documentation": "Select Fast/Slow Jog Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_11",
    "kind": "MEM",
    "documentation": "Select Mpg Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_12",
    "kind": "MEM",
    "documentation": "Axis 1 + Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_13",
    "kind": "MEM",
    "documentation": "Axis 1 - Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_14",
    "kind": "MEM",
    "documentation": "Axis 2 + Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_15",
    "kind": "MEM",
    "documentation": "Axis 2 - Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_16",
    "kind": "MEM",
    "documentation": "Axis 3 + Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_17",
    "kind": "MEM",
    "documentation": "Axis 3 - Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_18",
    "kind": "MEM",
    "documentation": "Axis 4 + Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_19",
    "kind": "MEM",
    "documentation": "Axis 4 - Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_20",
    "kind": "MEM",
    "documentation": "Axis 5 + Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_21",
    "kind": "MEM",
    "documentation": "Axis 5 - Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_22",
    "kind": "MEM",
    "documentation": "Axis 6 + Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_23",
    "kind": "MEM",
    "documentation": "Axis 6 - Jog"
  },
  {
    "name": "SV_PLC_FUNCTION_24",
    "kind": "MEM",
    "documentation": "Aux1"
  },
  {
    "name": "SV_PLC_FUNCTION_25",
    "kind": "MEM",
    "documentation": "Aux2"
  },
  {
    "name": "SV_PLC_FUNCTION_26",
    "kind": "MEM",
    "documentation": "Aux3"
  },
  {
    "name": "SV_PLC_FUNCTION_27",
    "kind": "MEM",
    "documentation": "Aux4"
  },
  {
    "name": "SV_PLC_FUNCTION_28",
    "kind": "MEM",
    "documentation": "Aux5"
  },
  {
    "name": "SV_PLC_FUNCTION_29",
    "kind": "MEM",
    "documentation": "Aux6"
  },
  {
    "name": "SV_PLC_FUNCTION_30",
    "kind": "MEM",
    "documentation": "Aux7"
  },
  {
    "name": "SV_PLC_FUNCTION_31",
    "kind": "MEM",
    "documentation": "Aux8"
  },
  {
    "name": "SV_PLC_FUNCTION_32",
    "kind": "MEM",
    "documentation": "Aux9"
  },
  {
    "name": "SV_PLC_FUNCTION_33",
    "kind": "MEM",
    "documentation": "Aux10"
  },
  {
    "name": "SV_PLC_FUNCTION_34",
    "kind": "MEM",
    "documentation": "Select Rapid Override"
  },
  {
    "name": "SV_PLC_FUNCTION_35",
    "kind": "MEM",
    "documentation": "Select Man or Auto Spindle Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_36",
    "kind": "MEM",
    "documentation": "Do not use"
  },
  {
    "name": "SV_PLC_FUNCTION_37",
    "kind": "MEM",
    "documentation": "Spindle Start"
  },
  {
    "name": "SV_PLC_FUNCTION_38",
    "kind": "MEM",
    "documentation": "Spindle Stop"
  },
  {
    "name": "SV_PLC_FUNCTION_39",
    "kind": "MEM",
    "documentation": "Aux11"
  },
  {
    "name": "SV_PLC_FUNCTION_40",
    "kind": "MEM",
    "documentation": "Aux12"
  },
  {
    "name": "SV_PLC_FUNCTION_41",
    "kind": "MEM",
    "documentation": "Deprecated. Do not use"
  },
  {
    "name": "SV_PLC_FUNCTION_42",
    "kind": "MEM",
    "documentation": "Deprecated. Do not use"
  },
  {
    "name": "SV_PLC_FUNCTION_43",
    "kind": "MEM",
    "documentation": "Select Coolant Flood"
  },
  {
    "name": "SV_PLC_FUNCTION_44",
    "kind": "MEM",
    "documentation": "Select Coolant Mist"
  },
  {
    "name": "SV_PLC_FUNCTION_45",
    "kind": "MEM",
    "documentation": "Feed Hold"
  },
  {
    "name": "SV_PLC_FUNCTION_46",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_47",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_48",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_49",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_50",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_51",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_52",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_53",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_54",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_55",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_56",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_57",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_58",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_59",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_60",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_61",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_62",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_63",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_64",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_65",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_66",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_67",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_68",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_69",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_70",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_71",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_72",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_73",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_74",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_75",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_76",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_77",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_78",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_79",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_80",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_81",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_82",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_83",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_84",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_85",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_86",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_87",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_88",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_89",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_90",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_91",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_92",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_93",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_94",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_95",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_96",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_97",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_98",
    "kind": "MEM",
    "documentation": "Select Spindle CCW"
  },
  {
    "name": "SV_PLC_FUNCTION_99",
    "kind": "MEM",
    "documentation": "Select Spindle CW"
  },
  {
    "name": "SV_PLC_FUNCTION_100",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_101",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_102",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_103",
    "kind": "MEM",
    "documentation": "Do not use."
  },
  {
    "name": "SV_PLC_FUNCTION_104",
    "kind": "MEM",
    "documentation": "Coolant Auto / Manual Mode"
  },
  {
    "name": "SV_PLC_FUNCTION_105",
    "kind": "MEM",
    "documentation": "Do not use"
  },
  {
    "name": "SV_PLC_FUNCTION_106",
    "kind": "MEM",
    "documentation": "Spindle Override +"
  },
  {
    "name": "SV_PLC_FUNCTION_107",
    "kind": "MEM",
    "documentation": "Spindle Override -"
  },
  {
    "name": "SV_PLC_FUNCTION_108",
    "kind": "MEM",
    "documentation": "Select Spindle Override / 100 %"
  },
  {
    "name": "SV_PLC_FUNCTION_109",
    "kind": "MEM",
    "documentation": "Escape Key (sent to the PC)"
  },
  {
    "name": "SV_PLC_FUNCTION_110",
    "kind": "MEM",
    "documentation": "Axis 7 Jog +"
  },
  {
    "name": "SV_PLC_FUNCTION_111",
    "kind": "MEM",
    "documentation": "Axis 7 Jog -"
  },
  {
    "name": "SV_PLC_FUNCTION_112",
    "kind": "MEM",
    "documentation": "Axis 8 Jog +"
  },
  {
    "name": "SV_PLC_FUNCTION_113",
    "kind": "MEM",
    "documentation": "Axis 8 Jog -"
  },
  {
    "name": "SV_PLC_FUNCTION_114",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_115",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_116",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_117",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_118",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_119",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_120",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_121",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_122",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_123",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_124",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_125",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_126",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_FUNCTION_127",
    "kind": "MEM",
    "documentation": "Unused"
  },
  {
    "name": "SV_PLC_OVERRIDE_CONTROL_FEEDRATE_OVERRIDE",
    "kind": "MEM",
    "documentation": "1 = Feedrate can be changed from commanded value by Feedrate Override"
  },
  {
    "name": "SV_PLC_OVERRIDE_CONTROL_SPINDLE_OVERRIDE",
    "kind": "MEM",
    "documentation": "1 = Spindle Speed can be changed from commanded value by Spindle Override"
  },
  {
    "name": "SV_PLC_OVERRIDE_CONTROL_FEEDHOLD",
    "kind": "MEM",
    "documentation": "1 = Feedhold is allowed"
  },
  {
    "name": "SV_ENABLE_AXIS_1",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_2",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_3",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_4",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_5",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_6",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_7",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_ENABLE_AXIS_8",
    "kind": "MEM",
    "documentation": "Obsolete. Do not use."
  },
  {
    "name": "SV_MASTER_ENABLE",
    "kind": "MEM",
    "documentation": "PLC sets this bit to turn on the Master Enable to hardware devices (drives and PLCs)"
  },
  {
    "name": "SV_STALL_ERROR",
    "kind": "MEM",
    "documentation": "1 = MPU11 detected an error that the PLC program should handle. See SV_STALL_REASON and SV_STALL_AXIS for further information on the specific cause.\n\nPLC program should turn off all enables including the Master Enable when this error occurs.\n\nThe PLC Program should RST this bit if the error occurred and E-Stop is pushed in. (ie clear on E-Stop)"
  },
  {
    "name": "SV_MPG_1_ENABLED",
    "kind": "MEM",
    "documentation": "This MPG is enabled. This bit switches between MPG mode and Vector controlled mode for all axes in this group. When this is enabled the MPU11 will not process motion vectors from the PC or allow Jogging."
  },
  {
    "name": "SV_MPG_1_WINDUP_MODE",
    "kind": "MEM",
    "documentation": "The MPG is in windup mode. This means the MPG will move the total distance commanded by the MPG encoder input. This mode is typically enabled for x1 and x10 mode.\n\nThis mode should be disabled for x100 mode. When windup mode is disabled the MPG will try to keep up, but will go off position if the MPG encoder counts too fast.\n\nWhen this happens CNC11 will display the message “MPG moving too fast”."
  },
  {
    "name": "SV_MPG_1_OFFSET_MODE",
    "kind": "MEM",
    "documentation": "The MPG is in Offset Mode. The MPG movement will be added to the current Expected Position instead of setting the Expected Position. In this mode the MPG is independent and is allowed to command motion while vectors are being processed."
  },
  {
    "name": "SV_MPG_1_PLC_MPG_MODE",
    "kind": "MEM",
    "documentation": "The MPG is in PLC Controlled Mode. The MPG encoder input will be read from SV_MPG_1_OFFSET instead of the actual encoder input. The plc program can change SV_MPG_1_OFFSET which will cause the mpg axis to move."
  },
  {
    "name": "SV_MPG_2_ENABLED",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_ENABLED above."
  },
  {
    "name": "SV_MPG_2_WINDUP_MODE",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_WINDUP_MODE above."
  },
  {
    "name": "SV_MPG_2_OFFSET_MODE",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_OFFSET_MODE above."
  },
  {
    "name": "SV_MPG_2_PLC_MPG_MODE",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_PLC_MPG_MODE above."
  },
  {
    "name": "SV_MPG_3_ENABLED",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_ENABLED above."
  },
  {
    "name": "SV_MPG_3_WINDUP_MODE",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_WINDUP_MODE above."
  },
  {
    "name": "SV_MPG_3_OFFSET_MODE",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_OFFSET_MODE above."
  },
  {
    "name": "SV_MPG_3_PLC_MPG_MODE",
    "kind": "MEM",
    "documentation": "See SV_MPG_1_PLC_MPG_MODE above."
  },
  {
    "name": "SV_TRIGGER_PLOT_DUMP",
    "kind": "MEM",
    "documentation": "This bit is intended for internal debugging purposes. When set, it will start a debug dump to be sent to CNC software. After CNC software receives all the debug data, it will launch the plot.exe program to display it. Without custom built CNC software, the debug dump has no useful data."
  },
  {
    "name": "SV_RESET_PLC_STATS_MIN_MAX",
    "kind": "MEM",
    "documentation": "Resets the current Minimum/Maximum PLC executor statistics which are displayed on the PLC diagnostic screen (ALT-I)"
  },
  {
    "name": "SV_RESET_PLC_STATS_AVG",
    "kind": "MEM",
    "documentation": "Resets the current Average PLC executor statistics which are displayed on the PLC diagnostic screen (ALT-I)"
  },
  {
    "name": "SV_SPINDLE_RPM_MODE",
    "kind": "MEM",
    "documentation": "Used for C Axis Lathe. When this bit is set, the mpu11 will send the current value of SV_SPINDLE_DAC as the PID output to the drive for the last axis configured as a “C axis” When this mode is active, full power without motion and position errors are disabled for the axis."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_1",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_2",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_3",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_4",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_5",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_6",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_7",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_SCALE_INHIBIT_AXIS_8",
    "kind": "MEM",
    "documentation": "When set, scale compensation for the axis is disabled until the bit is reset. When the scale compensation is disabled in this manner it will undo any previous corrections. The DRO will show the absolute position of the motor encoder when the scale is disabled."
  },
  {
    "name": "SV_ENABLE_IO_OVERRIDE",
    "kind": "MEM",
    "documentation": "When set by the PLC prgram, CNC software will indirectly allow the inversion and forcing of PLC bits through the live PLC display (ALT-I on the main screen) by manipulating machine parameters 911-939, which the PLC program can use directly to set system variables that actually perform the state forcing and inversion."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_1",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_2",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_3",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_4",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_5",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_6",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_7",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_DIRECTION_8",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to set the direction for RPM mode."
  },
  {
    "name": "SV_RPM_MODE_ENABLE_1-8",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_1",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_2",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_3",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_4",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_5",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_6",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_7",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_RPM_MODE_AXIS_ENABLE_8",
    "kind": "MEM",
    "documentation": "Used with AC1 drives to enable the axis in RPM mode."
  },
  {
    "name": "SV_DISABLE_STALL_DETECTION",
    "kind": "MEM",
    "documentation": "When SET, will disable the detection of some stall errors, such as position errors and full power without motion errors."
  },
  {
    "name": "SV_PLC_SET_AXIS_1_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_2_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_3_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_4_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_5_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_6_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_7_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_SET_AXIS_8_PART_ZERO",
    "kind": "MEM",
    "documentation": "When SET by a PLC program and the control is not running a job and at the main screen, will request CNC software to set the Part Zero for the axis (n = 1-8)."
  },
  {
    "name": "SV_PLC_FAULT_STATUS",
    "kind": "W",
    "documentation": "Bitwise parameter of certain fault conditions: 0x00000001 DIV_BY_ZERO\n\n0x00000002 OUT_OF_BOUNDS\n\n0x00000004 INVALID_OPCODE\n\nSee Internal PLC Fault Checking."
  },
  {
    "name": "SV_PLC_FAULT_ADDRESS",
    "kind": "W",
    "documentation": "Exact address in the PLC program where the above faultoccurred. Should be monitored as above. See Internal PLC Fault Checking."
  },
  {
    "name": "SV_PLC_SPINDLE_SPEED",
    "kind": "\n",
    "documentation": "If parameter 78 is not set to display the actual spindle speed, this value is the current spindle speed that is displayed on the screen."
  },
  {
    "name": "SV_STOP_REASON",
    "kind": "W",
    "documentation": "When motion stops a reason is given and that reason is stored here. Do not use at this time."
  },
  {
    "name": "SV_PLC_CAROUSEL_POSITION",
    "kind": "W",
    "documentation": "Bin position that the carousel is at. It is critical that the Carousel not be allowed to turn unless CNC11 is running.\n\nCheck the SV for Software running."
  },
  {
    "name": "SV_PLC_FEEDRATE_KNOB",
    "kind": "W",
    "documentation": "The feedrate knob as the PLC would have CNC11 see."
  },
  {
    "name": "SV_PLC_SPINDLE_KNOB",
    "kind": "W",
    "documentation": "Spindle Speed override percentage sent to the PLC"
  },
  {
    "name": "SV_SMSG_D_ARG_1",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_2",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_3",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_4",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_5",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_6",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_7",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_8",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_D_ARG_9",
    "kind": "\n",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_PLC_DEBOUNCE_1-64",
    "kind": "W",
    "documentation": "First 240 PLC inputs debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_1",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_2",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_3",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_4",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_5",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_6",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_7",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_8",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_9",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_10",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_11",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_12",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_13",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_14",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_15",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_16",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_17",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_18",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_19",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_20",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_21",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_22",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_23",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_24",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_25",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_26",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_27",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_28",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_29",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_30",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_31",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_JOG_LINK_DEBOUNCE_32",
    "kind": "W",
    "documentation": "Jog Panel Input debounce configuration words"
  },
  {
    "name": "SV_LOCAL_DEBOUNCE_1-13",
    "kind": "W",
    "documentation": "MPU11 Onboard/Local Inputs Debounce configuration"
  },
  {
    "name": "SV_MPG_1_AXIS_SELECT",
    "kind": "W",
    "documentation": "The current selected axis for the first mpg (1-8)"
  },
  {
    "name": "SV_MPG_1_MULTIPLIER",
    "kind": "W",
    "documentation": "The mpg multiplier value normally (1, 10, 100)"
  },
  {
    "name": "SV_MPG_1_PLC_OFFSET",
    "kind": "W",
    "documentation": "MPG Offset, for PLC controlled MPG Inputs. This allows the PLC to control the MPG through an Analog to Digital Input rather than an encoder. This mode is enabled when the PLCMPGmode bit is set."
  },
  {
    "name": "SV_MPG_2_AXIS_SELECT",
    "kind": "W",
    "documentation": "The current selected axis for the second mpg (1-8)"
  },
  {
    "name": "SV_MPG_2_MULTIPLIER",
    "kind": "W",
    "documentation": "The mpg multiplier value normally (1, 10, 100)"
  },
  {
    "name": "SV_MPG_2_PLC_OFFSET",
    "kind": "W",
    "documentation": "MPG Offset, for PLC controlled MPG Inputs. This allows the PLC to control the MPG through an Analog to Digital Input rather than an encoder. This mode is enabled when the PLCMPGmode bit is set."
  },
  {
    "name": "SV_MPG_3_AXIS_SELECT",
    "kind": "W",
    "documentation": "The current selected axis for the third mpg (1-8)"
  },
  {
    "name": "SV_MPG_3_MULTIPLIER",
    "kind": "W",
    "documentation": "The mpg multiplier value normally (1, 10, 100)"
  },
  {
    "name": "SV_MPG_3_PLC_OFFSET",
    "kind": "W",
    "documentation": "MPG Offset, for PLC controlled MPG Inputs. This allows the PLC to control the MPG through an Analog to Digital Input rather than an encoder. This mode is enabled when the PLCMPGmode bit is set."
  },
  {
    "name": "SV_DRIVE_CONTROL_1",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_2",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_3",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_4",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_5",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_6",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_7",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_DRIVE_CONTROL_8",
    "kind": "W",
    "documentation": "High Speed Drive Control word (Lower 16 Bits) see Drive documentation\n\n\n\n\nDC3IOB / ALLIN1DC Control"
  },
  {
    "name": "SV_SPINDLE_DAC",
    "kind": "W",
    "documentation": "Used for C Axis Lathe. When this bit is set, the MPU will send the current value of SV_SPINDLE_DAC as the PID output to the drive for the last axis configured as a “C axis” When this mode is active, full power without motion and position errors are disabled for the axis."
  },
  {
    "name": "SV_NV_W1-10",
    "kind": "W",
    "documentation": "Nonvolatile memory.\n\nThese system variables can be used in the same manner as other I32 variables in the PLC program. Their values are retained even when power is off. A PLC programmer can expect any changes to these system variables to be written to non-volatile memory within 2ms."
  },
  {
    "name": "SV_SYS_COMMAND",
    "kind": "W",
    "documentation": "Setting this value to a non-zero, positive number, will cause the CNC software to launch a process and try to execute the Windows batch file named plc_system_command_n.bat, where n is the number the SV_SYS_COMMAND is set to."
  },
  {
    "name": "SV_INVERT_INP1_16_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to invert the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP."
  },
  {
    "name": "SV_INVERT_INP17_32_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to invert the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP."
  },
  {
    "name": "SV_INVERT_INP33_48_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to invert the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP."
  },
  {
    "name": "SV_INVERT_INP49_64_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to invert the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP."
  },
  {
    "name": "SV_INVERT_INP65_80_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to invert the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP."
  },
  {
    "name": "SV_FORCE_INP1_16_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force the state of the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP. The input is forced on if the equivalent bit in the SV_INVERT_INP* system variable is clear and forced off if the equivalent bit in SV_INVERT_INP* system variable is set."
  },
  {
    "name": "SV_FORCE_INP17_32_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force the state of the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP. The input is forced on if the equivalent bit in the SV_INVERT_INP* system variable is clear and forced off if the equivalent bit in SV_INVERT_INP* system variable is set."
  },
  {
    "name": "SV_FORCE_INP33_48_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force the state of the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP. The input is forced on if the equivalent bit in the SV_INVERT_INP* system variable is clear and forced off if the equivalent bit in SV_INVERT_INP* system variable is set."
  },
  {
    "name": "SV_FORCE_INP49_64_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force the state of the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP. The input is forced on if the equivalent bit in the SV_INVERT_INP* system variable is clear and forced off if the equivalent bit in SV_INVERT_INP* system variable is set."
  },
  {
    "name": "SV_FORCE_INP65_80_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force the state of the indicated inputs, with the least significant bit mapped to the lower INP bit and the most significant bit mapped to the higher numbered INP. The input is forced on if the equivalent bit in the SV_INVERT_INP* system variable is clear and forced off if the equivalent bit in SV_INVERT_INP* system variable is set."
  },
  {
    "name": "SV_FORCE_ON_OUT1_16_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_OFF* (see below) system variable must be clear."
  },
  {
    "name": "SV_FORCE_ON_OUT17_32_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_OFF* (see below) system variable must be clear."
  },
  {
    "name": "SV_FORCE_ON_OUT33_48_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_OFF* (see below) system variable must be clear."
  },
  {
    "name": "SV_FORCE_ON_OUT49_64_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_OFF* (see below) system variable must be clear."
  },
  {
    "name": "SV_FORCE_ON_OUT65_80_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_OFF* (see below) system variable must be clear."
  },
  {
    "name": "SV_FORCE_OFF_OUT1_16_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_ON* (see above) system variable must be clear."
  },
  {
    "name": "SV_FORCE_OFF_OUT17_32_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_ON* (see above) system variable must be clear."
  },
  {
    "name": "SV_FORCE_OFF_OUT33_48_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_ON* (see above) system variable must be clear."
  },
  {
    "name": "SV_FORCE_OFF_OUT49_64_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_ON* (see above) system variable must be clear."
  },
  {
    "name": "SV_FORCE_OFF_OUT65_80_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated outputs, with the least significant bit mapped to the lower OUT bit and the most significant bit mapped to the higher numbered OUT bit. Note that the equivalent bit in the SV_FORCE_ON* (see above) system variable must be clear."
  },
  {
    "name": "SV_?_AXIS_DRIVE_CONTROL",
    "kind": "W",
    "documentation": "These nine system variables are mapped to the SV_DRIVE_CONTROL_1-8 system variables according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_FORCE_ON_MEM1_16_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated memory bits, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_OFF_MEM* (see below) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_ON_MEM17_32_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated memory bits, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_OFF_MEM* (see below) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_ON_MEM33_48_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated memory bits, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_OFF_MEM* (see below) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_ON_MEM49_64_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated memory bits, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_OFF_MEM* (see below) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_ON_MEM65_80_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force ON the indicated memory bits, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_OFF_MEM* (see below) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_OFF_MEM1_16_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated memory bit, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_ON_MEM* (see above) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_OFF_MEM17_32_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated memory bit, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_ON_MEM* (see above) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_OFF_MEM33_48_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated memory bit, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_ON_MEM* (see above) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_OFF_MEM49_64_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated memory bit, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_ON_MEM* (see above) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_FORCE_OFF_MEM65_80_BITS",
    "kind": "W",
    "documentation": "The lower 16 bits of each of these system variables is used to force OFF the indicated memory bit, with the least significant bit mapped to the lower MEM bit and the most significant bit mapped to the higher numbered MEM bit.  Note that the equivalent bit in the SV_FORCE_ON_MEM* (see above) system variable must be clear. Note that the forced state is implemented between PLC program passes, i.e., if the PLC program changes a forced memory bit during execution of a program, it will update the state of the memory bit."
  },
  {
    "name": "SV_SYS_MACRO",
    "kind": "W",
    "documentation": "Setting this system variable to a non-zero value while CNC software is at the main menu, will cause the CNC software to try to load and run the G-code program named plcmacroN.mac located in the system directory. For example, if on a Mill system, setting SV_SYS_MACRO = 3 will attempt to run the G-code file named \\cncm\\system\\plcmacro3.mac. This can be set to a negative value."
  },
  {
    "name": "SV_PLC_FEEDRATE_OVERRIDE",
    "kind": "FW",
    "documentation": "The Feedrate factor (for MPU11 motion control). Values can range from 0 to 2.0. A value of 1.0 results in no change to the G-code programmed or Jog Rate value. Note that the MPU11 will cap the Feedrate to the maximum set in Machine Setup.\n\nCare must be taken to never apply a negative value."
  },
  {
    "name": "SV_SMSG_F_ARG_1",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_2",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_3",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_4",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_5",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_6",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_7",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_8",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_SMSG_F_ARG_9",
    "kind": "FW",
    "documentation": "Reserved for future use. Do not use."
  },
  {
    "name": "SV_NV_FW1-10",
    "kind": "FW",
    "documentation": "Nonvolatile memory.\n\nThese system variables can be used in the same manner as other F32 variables in the PLC program. Their values are retained even when power is off. A PLC programmer can expect any changes to these system variables to be written to non-volatile memory within 2ms."
  },
  {
    "name": "SV_METER_1",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_2",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_3",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_4",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_5",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_6",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_7",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_8",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_9",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_10",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_11",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_12",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_13",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_14",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_15",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_METER_16",
    "kind": "FW",
    "documentation": "These system variables are set by the PLC program to values between -100.0 and 100.0 for use of the CNC software to display as a meter in the DRO. Only the first eight are used, the meters 9-16 are reserved for future implementation."
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_1",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_2",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_3",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_4",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_5",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_6",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_7",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_RPM_MODE_SPEED_REQUEST_8",
    "kind": "FW",
    "documentation": "For AC1 drives, the requested RPM speed"
  },
  {
    "name": "SV_?_AXIS_METER",
    "kind": "FW",
    "documentation": "These nine system variables are mapped to the\n\nSV_METER_1-8 system variables according to the axis labels (?) XYZABCUVW. They are intended to be a convenience when writing PLC programs so that they can handle axis changes more easily."
  },
  {
    "name": "SV_SPINDLE_METER",
    "kind": "FW",
    "documentation": "This value is mapped to one of the SV_METER_1 – 16 system variables, in particular the one that corresponds to the spindle axis."
  }
]
