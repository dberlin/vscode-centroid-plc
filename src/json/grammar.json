[
    {
        "type": "Rule",
        "name": "PLCProgram",
        "orgText": "() => {\n            this.AT_LEAST_ONE(() => {\n                this.SUBRULE(this.Stage);\n            });\n        }",
        "definition": [
            {
                "type": "RepetitionMandatory",
                "idx": 0,
                "definition": [
                    {
                        "type": "NonTerminal",
                        "name": "Stage",
                        "idx": 0
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "Stage",
        "orgText": "() => {\n            // Stages may be unnamed\n            this.OPTION({\n                // Don't consume this if it is really a declaration\n                GATE: () => this.LA(2).tokenType != IS,\n                DEF: () => this.CONSUME(Identifier)\n            });\n            this.OR([\n                {\n                    ALT: () => this.SUBRULE(this.Declaration)\n                },\n                {\n                    ALT: () => this.SUBRULE(this.IfStatement)\n                }\n            ]);\n        }",
        "definition": [
            {
                "type": "Option",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "Identifier",
                        "label": "Identifier",
                        "idx": 0,
                        "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
                    }
                ]
            },
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "Declaration",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "IfStatement",
                                "idx": 0
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "Declaration",
        "orgText": "() => {\n            this.CONSUME1(Identifier);\n            this.CONSUME(IS);\n            this.SUBRULE(this.MathExpression);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 1,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "IS",
                "label": "IS",
                "idx": 0,
                "pattern": "IS"
            },
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 0
            }
        ]
    },
    {
        "type": "Rule",
        "name": "IfStatement",
        "orgText": "() => {\n            this.CONSUME(IF);\n            this.SUBRULE(this.TruthExpression);\n            this.CONSUME(THEN);\n            this.SUBRULE1(this.ActionExpression);\n            this.MANY(() => {\n                this.CONSUME(Comma);\n                this.SUBRULE2(this.ActionExpression);\n            });\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "IF",
                "label": "IF",
                "idx": 0,
                "pattern": "IF"
            },
            {
                "type": "NonTerminal",
                "name": "TruthExpression",
                "idx": 0
            },
            {
                "type": "Terminal",
                "name": "THEN",
                "label": "THEN",
                "idx": 0,
                "pattern": "THEN"
            },
            {
                "type": "NonTerminal",
                "name": "ActionExpression",
                "idx": 1
            },
            {
                "type": "Repetition",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "Comma",
                        "label": "Comma",
                        "idx": 0,
                        "pattern": ","
                    },
                    {
                        "type": "NonTerminal",
                        "name": "ActionExpression",
                        "idx": 2
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "TruthExpression",
        "orgText": "() => {\n            this.SUBRULE1(this.RelationalExpression);\n            this.MANY(() => {\n                this.CONSUME(LogicalOp);\n                this.SUBRULE2(this.RelationalExpression);\n            });\n        }",
        "definition": [
            {
                "type": "NonTerminal",
                "name": "RelationalExpression",
                "idx": 1
            },
            {
                "type": "Repetition",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "LogicalOp",
                        "label": "LogicalOp",
                        "idx": 0,
                        "pattern": "&&|\\|\\||XOR|\\^"
                    },
                    {
                        "type": "NonTerminal",
                        "name": "RelationalExpression",
                        "idx": 2
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "RelationalExpression",
        "orgText": "() => {\n            this.SUBRULE1(this.MathExpression);\n            this.OPTION(() => {\n                this.CONSUME(RelationalOp);\n                this.SUBRULE2(this.MathExpression);\n            });\n        }",
        "definition": [
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 1
            },
            {
                "type": "Option",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "RelationalOp",
                        "label": "RelationalOp",
                        "idx": 0,
                        "pattern": "<=|>=|<|>|!=|=="
                    },
                    {
                        "type": "NonTerminal",
                        "name": "MathExpression",
                        "idx": 2
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "MathExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.SUBRULE(this.MathCallExpression) },\n                { ALT: () => this.SUBRULE(this.UnaryExpression) },\n                { ALT: () => this.SUBRULE(this.AtomicExpression) }\n            ]);\n            this.MANY(() => {\n                this.CONSUME(BinaryOp);\n                this.SUBRULE(this.MathExpression);\n            });\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "MathCallExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "UnaryExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "AtomicExpression",
                                "idx": 0
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Repetition",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "BinaryOp",
                        "label": "BinaryOp",
                        "idx": 0,
                        "pattern": "NOT_APPLICABLE"
                    },
                    {
                        "type": "NonTerminal",
                        "name": "MathExpression",
                        "idx": 0
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "MathCallExpression",
        "orgText": "() => {\n            this.CONSUME(MathCall);\n            this.CONSUME(LParen);\n            this.SUBRULE1(this.MathExpression);\n            this.MANY(() => {\n                this.CONSUME(Comma);\n                this.SUBRULE2(this.MathExpression);\n            });\n            this.CONSUME(RParen);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "MathCall",
                "label": "MathCall",
                "idx": 0,
                "pattern": "NOT_APPLICABLE"
            },
            {
                "type": "Terminal",
                "name": "LParen",
                "label": "LParen",
                "idx": 0,
                "pattern": "("
            },
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 1
            },
            {
                "type": "Repetition",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "Comma",
                        "label": "Comma",
                        "idx": 0,
                        "pattern": ","
                    },
                    {
                        "type": "NonTerminal",
                        "name": "MathExpression",
                        "idx": 2
                    }
                ]
            },
            {
                "type": "Terminal",
                "name": "RParen",
                "label": "RParen",
                "idx": 0,
                "pattern": ")"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "ParenExpression",
        "orgText": "() => {\n            this.CONSUME(LParen);\n            this.SUBRULE(this.MathExpression);\n            this.CONSUME(RParen);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "LParen",
                "label": "LParen",
                "idx": 0,
                "pattern": "("
            },
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 0
            },
            {
                "type": "Terminal",
                "name": "RParen",
                "label": "RParen",
                "idx": 0,
                "pattern": ")"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "UnaryExpression",
        "orgText": "() => {\n            this.CONSUME(UnaryOp);\n            this.SUBRULE(this.MathExpression);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "UnaryOp",
                "label": "UnaryOp",
                "idx": 0,
                "pattern": "NOT_APPLICABLE"
            },
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 0
            }
        ]
    },
    {
        "type": "Rule",
        "name": "AtomicExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.SUBRULE(this.ParenExpression) },\n                { ALT: () => this.SUBRULE(this.RawMemAccess) },\n                { ALT: () => this.CONSUME(Identifier) },\n                { ALT: () => this.CONSUME(Number) },\n                { ALT: () => this.CONSUME(FPNumber) }\n            ]);\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "ParenExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "RawMemAccess",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "Identifier",
                                "label": "Identifier",
                                "idx": 0,
                                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "Number",
                                "label": "Number",
                                "idx": 0,
                                "pattern": "[0-9]+"
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "FPNumber",
                                "label": "FPNumber",
                                "idx": 0,
                                "pattern": "(?:[0-9]+)?\\.[0-9]+"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "RawMemAccess",
        "orgText": "() => {\n            this.CONSUME(RawAccess);\n            this.CONSUME(LBracket);\n            this.SUBRULE(this.MathExpression);\n            this.CONSUME(RBracket);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "RawAccess",
                "label": "RawAccess",
                "idx": 0,
                "pattern": "NOT_APPLICABLE"
            },
            {
                "type": "Terminal",
                "name": "LBracket",
                "label": "LBracket",
                "idx": 0,
                "pattern": "["
            },
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 0
            },
            {
                "type": "Terminal",
                "name": "RBracket",
                "label": "RBracket",
                "idx": 0,
                "pattern": "]"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "ActionExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.SUBRULE(this.CoilExpression) },\n                { ALT: () => this.SUBRULE(this.AssignmentExpression) },\n                { ALT: () => this.SUBRULE(this.CallExpression) }\n            ]);\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "CoilExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "AssignmentExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "CallExpression",
                                "idx": 0
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "AssignmentExpression",
        "orgText": "() => {\n            this.CONSUME(Identifier);\n            this.CONSUME(Assignment);\n            this.OR([\n                { ALT: () => this.SUBRULE(this.MathExpression) },\n                { ALT: () => this.CONSUME(Strings) }\n            ]);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 0,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "Assignment",
                "label": "Assignment",
                "idx": 0,
                "pattern": "="
            },
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "MathExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "Strings",
                                "label": "Strings",
                                "idx": 0,
                                "pattern": "\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "CallExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.SUBRULE(this.MessageExpression) },\n                { ALT: () => this.SUBRULE(this.BitOpExpression) },\n                { ALT: () => this.SUBRULE(this.BitTestExpression) },\n                { ALT: () => this.SUBRULE(this.BTWWTBExpression) },\n                { ALT: () => this.SUBRULE(this.ShiftExpression) },\n                { ALT: () => this.SUBRULE(this.SetResetExpression) },\n                { ALT: () => this.SUBRULE(this.JumpExpression) }\n            ]);\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "MessageExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "BitOpExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "BitTestExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "BTWWTBExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "ShiftExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "SetResetExpression",
                                "idx": 0
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "NonTerminal",
                                "name": "JumpExpression",
                                "idx": 0
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "MessageExpression",
        "orgText": "() => {\n            this.CONSUME(MSG);\n            // Needs to result in a number\n            this.SUBRULE(this.MathExpression);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "MSG",
                "label": "MSG",
                "idx": 0,
                "pattern": "MSG"
            },
            {
                "type": "NonTerminal",
                "name": "MathExpression",
                "idx": 0
            }
        ]
    },
    {
        "type": "Rule",
        "name": "SetResetExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.CONSUME(SET) },\n                { ALT: () => this.CONSUME(RST) }\n            ]);\n            this.CONSUME(Identifier);\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "SET",
                                "label": "SET",
                                "idx": 0,
                                "pattern": "SET"
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "RST",
                                "label": "RST",
                                "idx": 0,
                                "pattern": "RST"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 0,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "ShiftExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.CONSUME(LSHIFT) },\n                { ALT: () => this.CONSUME(RSHIFT) }\n            ]);\n            this.CONSUME(Identifier);\n            this.CONSUME(Number);\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "LSHIFT",
                                "label": "LSHIFT",
                                "idx": 0,
                                "pattern": "LSHIFT"
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "RSHIFT",
                                "label": "RSHIFT",
                                "idx": 0,
                                "pattern": "RSHIFT"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 0,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "Number",
                "label": "Number",
                "idx": 0,
                "pattern": "[0-9]+"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "BitOpExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.CONSUME(BITSET) },\n                { ALT: () => this.CONSUME(BITRST) }\n            ]);\n            this.CONSUME(Identifier);\n            this.CONSUME(Number);\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "BITSET",
                                "label": "BITSET",
                                "idx": 0,
                                "pattern": "BITSET"
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "BITRST",
                                "label": "BITRST",
                                "idx": 0,
                                "pattern": "BITRST"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 0,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "Number",
                "label": "Number",
                "idx": 0,
                "pattern": "[0-9]+"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "BitTestExpression",
        "orgText": "() => {\n            this.CONSUME(BITTST);\n            this.CONSUME1(Identifier);\n            this.CONSUME(Number);\n            this.OPTION(() => {\n                this.CONSUME2(Identifier);\n            });\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "BITTST",
                "label": "BITTST",
                "idx": 0,
                "pattern": "BITTST"
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 1,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "Number",
                "label": "Number",
                "idx": 0,
                "pattern": "[0-9]+"
            },
            {
                "type": "Option",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "Identifier",
                        "label": "Identifier",
                        "idx": 2,
                        "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "BTWWTBExpression",
        "orgText": "() => {\n            this.OR([\n                { ALT: () => this.CONSUME(BTW) },\n                { ALT: () => this.CONSUME(WTB) }\n            ]);\n            this.CONSUME1(Identifier);\n            this.CONSUME2(Identifier);\n            this.OPTION(() => {\n                this.CONSUME(Number);\n            });\n        }",
        "definition": [
            {
                "type": "Alternation",
                "idx": 0,
                "definition": [
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "BTW",
                                "label": "BTW",
                                "idx": 0,
                                "pattern": "BTW"
                            }
                        ]
                    },
                    {
                        "type": "Flat",
                        "definition": [
                            {
                                "type": "Terminal",
                                "name": "WTB",
                                "label": "WTB",
                                "idx": 0,
                                "pattern": "WTB"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 1,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 2,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Option",
                "idx": 0,
                "definition": [
                    {
                        "type": "Terminal",
                        "name": "Number",
                        "label": "Number",
                        "idx": 0,
                        "pattern": "[0-9]+"
                    }
                ]
            }
        ]
    },
    {
        "type": "Rule",
        "name": "JumpExpression",
        "orgText": "() => {\n            this.CONSUME(JMP);\n            // Needs to result in a number\n            this.CONSUME(Identifier);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "JMP",
                "label": "JMP",
                "idx": 0,
                "pattern": "JMP"
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 0,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            }
        ]
    },
    {
        "type": "Rule",
        "name": "CoilExpression",
        "orgText": "() => {\n            this.CONSUME(LParen);\n            this.CONSUME(Identifier);\n            this.CONSUME(RParen);\n        }",
        "definition": [
            {
                "type": "Terminal",
                "name": "LParen",
                "label": "LParen",
                "idx": 0,
                "pattern": "("
            },
            {
                "type": "Terminal",
                "name": "Identifier",
                "label": "Identifier",
                "idx": 0,
                "pattern": "[a-zA-Z_][a-zA-Z_\\d]*"
            },
            {
                "type": "Terminal",
                "name": "RParen",
                "label": "RParen",
                "idx": 0,
                "pattern": ")"
            }
        ]
    }
]